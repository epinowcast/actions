name: 'Install CmdStan with caching'
description: 'Install CmdStan with caching'
inputs:
  cmdstan-version:
    description: 'CmdStan version to install (use "latest" for the latest version)'
    required: false
    default: 'latest'
  num-cores:
    description: 'Number of cores to use for building CmdStan'
    required: false
    default: '1'
  github-token:
    description: The GitHub token used to create an authenticated client
    default: ${{ github.token }}
    required: false

runs:
  using: 'composite'
  steps:
    - name: Check and Install cmdstanr
      run: |
        if (!requireNamespace("cmdstanr", quietly = TRUE)) {
          install.packages("cmdstanr", repos = c("https://stan-dev.r-universe.dev/", getOption("repos")))
        }
      shell: Rscript {0}

    - name: Determine CmdStan Version (Unix)
      if: inputs.cmdstan-version == 'latest' && runner.os != 'Windows'
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        node ${{ github.action_path }}/scripts/get-latest-release.js >> $GITHUB_ENV
      shell: bash

    - name: Determine CmdStan Version (Windows)
      if: inputs.cmdstan-version == 'latest' && runner.os == 'Windows'
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        node "${{ github.action_path }}\scripts\get-latest-release.js" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Set CmdStan Version (Specified)
      if: inputs.cmdstan-version != 'latest'
      run: echo "CMDSTAN_VERSION=${{ inputs.cmdstan-version }}" >> $GITHUB_ENV
      shell: bash

    - name: Restore Cache
      id: cache-cmdstan
      uses: actions/cache@v4
      with:
        path: '~/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}'
        key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

    - name: Check the CmdStan toolchain and repair it if required
      if: steps.cache-cmdstan.outputs.cache-hit != 'true'
      run: |
        Rscript -e 'cmdstanr::check_cmdstan_toolchain(fix = TRUE)'
      shell: bash
 
    - name: Install CmdStan using cmdstanr
      if: steps.cache-cmdstan.outputs.cache-hit != 'true'
      run: |
        Rscript -e 'cmdstanr::install_cmdstan(version = "${{ env.CMDSTAN_VERSION }}", cores = ${{ inputs.num-cores }})'
      shell: bash

    - name: Set Cmdstan path
      run: |
        Rscript -e 'cmdstanr::set_cmdstan_path("~/.cmdstan/cmdstan-${{ env.CMDSTAN_VERSION }}")'
      shell: bash
